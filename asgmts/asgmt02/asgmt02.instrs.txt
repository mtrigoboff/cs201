CS201 ASSIGNMENT 2 INSTRUCTIONS
-------------------------------

Remember that you only need to do one of the assignments below.

In each of these assignments, you will be asked to write a "math library"
function. You will be writing the function in assembly language, using gcc's
inline assembler. Class code files asm.c and cpuid.c are good models for how to
write assembly code for gcc.

You can use a mixture of C code and assembly code for these assignments, but all
floating point calculations (including comparisons) must be done in assembly
language. You should use C only for support tasks like defining and initializing
local variables, returning a value from the function, etc.

Your assembly code should work in the following way:

    1. Load values from the function's arguments and local variables onto the
        floating point stack (local variables can be initialized first by C code
        as long as no calculations are performed).
    2. Perform the required calculation entirely within the floating point
        stack. Using stack comments in this code will help you keep track of
        what's going on. (A stack comment is a comment that specifies what is
        supposed to be on the floating point stack after that instruction has
        executed. Or you can write stack comments to specify the situation
        before the instruction executes if you prefer.)
    3. Store the calculated result from the floating point stack to a local
        variable
    4. Return that the value of that local variable with a C 'return' statement.

The IA-32 Architecture includes the floating point instructions needed to
implement these functions (they all start with the letter 'F'). You will save
yourself a lot of work if you carefully choose the right instructions. This is a
large and powerful instruction set, and you should make use of that power
instead of "re-inventing the wheel." In other words, don't spend a lot of time
writing a lot of dumb code. Instead, spend your time thinking first, and you
will be able to write a smaller amount of smart code.

--------------------------------------------------------------------------------

REGULAR VERSION

In hullSpeed(), write FPU assembly code to calculate the "hull speed" of a boat
according to the formula 1.34*sqrt(lgth) where lgth is the length in feet of the
boat at the waterline, and the computed speed is specified in knots.

Start with the provided code file a02.c. Upload your code as a02.c.

--------------------------------------------------------------------------------

PREMIUM VERSION

This assignment includes all of the work from the Regular version plus this
additional task:

In the function named roundD write assembly code that rounds its first argument
to an integer value according to the rounding mode specified by its second
argument. The function prototype is:

    double roundD(double n, RoundingMode roundingMode);

RoundingMode is defined in the starter code.

You will need to set the Rounding Control field of the FPU Control Word in
accordance with the roundingMode argument.

You will also need to restore the original value of the FPU's Rounding Control
field before roundD returns. Do not use finit or fninit for this. The original
value is whatever the value was when roundD was called, which could have been
set by the calling function to some arbitrary value, not necessarily what finit
produces.

Start with the provided code file a02p.c. Upload your code as a02p.c.

--------------------------------------------------------------------------------

HOW TO COMPILE THE CODE FOR ASSIGNMENT 2

Because the code for both versions of this assignment calls the sqrt() function
from math.h, you will need to compile it as follows:

    gcc <required flags> a02p.c -lm -o a02p

You can use file ~michael.trigoboff/bin/gclm to avoid having to type this.

